pipeline:
  # integration:
  #   image: python:2
  #   commands:
  #     - echo "Building"

  test:
    image: hpreston/drone-ansible-netdevops
    commands:
      - env
      - echo $K8S_SERVER
      - echo $K8S_TOKEN
      - kubectl --server=$K8S_SERVER --token=$K8S_TOKEN --certificate-authority=devx-cluster-ca.txt --namespace=hapresto get pods
    secrets: [ K8S_SERVER, K8S_TOKEN ]


  delivery:
    image: plugins/docker
    repo: hpreston/myhero_data
    tags:
      - "${DRONE_COMMIT_BRANCH}"
      - "${DRONE_BUILD_NUMBER}"
    secrets: [ docker_username, docker_password ]

  deliveryprod:
    image: plugins/docker
    repo: hpreston/myhero_data
    tag: latest
    when:
      branch: master
    secrets: [ docker_username, docker_password ]

  # deploy:
  #   image: vallard/drone-kube
  #   template: deployment.yaml
  #   secrets: [ KUBE_TOKEN, KUBE_CA, KUBE_SERVER ]

  deploy:
    image: wernight/kubectl
    commands:
      - sed -e "s/{{ build.number }}/${DRONE_BUILD_NUMBER}/g" deployment.yaml > deployment_push.yaml
      - "kubectl --server=$${K8S_SERVER} --token=$${K8S_TOKEN} --certificate-authority=devx-cluster-ca.txt apply -f deployment_push.yaml"
    secrets: [ K8S_SERVER, K8S_TOKEN ]


  # deploy-staging:
  #   image: quay.io/honestbee/drone-kubernetes
  #   # kubernetes_server: ${KUBERNETES_SERVER_STAGING}
  #   # kubernetes_cert: ${KUBERNETES_CERT_STAGING}
  #   # kubernetes_token: ${KUBERNETES_TOKEN_STAGING}
  #   deployment: myhero-data
  #   repo: hpreston/myhero_data
  #   container: myhero-data
  #   namespace: hapresto
  #   tag:
  #       - "${DRONE_BUILD_NUMBER}"
  #   when:
  #       branch: [ dev ]
  #   secrets: [ KUBERNETES_SERVER, KUBERNETES_TOKEN, KUBERNETES_CERT ]


  # notify:
  #   image: hpreston/drone-spark:0.7
  #   secrets: [ SPARK_TOKEN, PERSONEMAIL ]
  #   message: "Build Complete!"
  #   when:
  #     status: [ success, failure ]
